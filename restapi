REST API находится  по ссылке http://host:port/tsproject/api/


DEPARTMENT
http://host:port/tsproject/api/department
GET - получение всех отделов, ответ приходит в формате:
[
  {
    "name": String,
    "parent": Department.name, //String
    "head" : Employee.name //String
  }
]

PUT - добавление нового отдела, чтобы добавить новый отдел, рест ожидает JSON-объект с обязательными полями
{
  "name": String, // (isRequired)
  "head": Employee._id, //(isRequired)
  "parent": Department._id // (Optional)
}


http://host:port/tsproject/api/department/:id
GET - получение конкретного отдела, ответ приходит в формате:
{
  "name" : String,
  "parent" : Department.name, //String
  "head" : Employee.name  //String
}

PUT - обновить данные, рест ожидает объект с полями, которые надо обновить в формате JSON
{
  "_id" : Int,  //(isRequired)
  "name" : String,  //(isRequired)
  "parent" : Department._id,  //(Optional)
  "head" : Employee._id //(isRequired)
}

PUT - закрытие отдела, ожидает объект с одним полем {"closet": true}


http://host:port/tsproject/api/department/:id/employee
GET - получение списка сотрудников подразделения, ответ приходит в формате:
[
  {
    "f_name" : String,
    "s_name" : String,
    "t_name" : String
  }
]


http://host:port/tsproject/api/department/:id/parent
GET - получение списка дочерних подразделений, ответ предоставляется в формате:
[
  {
    "name" : String
  }
]

PUT - переподчинение отдела другому подразделению, рест ожидает объект в формате:
{
  "id" : Int,
  "parent" : Parent._id
}



EMPLOYEE
http://host:port/tsproject/api/employee
GET - получение всех сотрудников, ответ приходит в формате:
[
  {
    "f_name" : String,
    "s_name" : String,
    "t_name" : String,
    "sex" : String,
    "b_date" : Date,
    "department" : Department.name, //String
    "salary" : Int
  }
]

PUT - добавление сотрудника, рест ожидает объект в формате:
{
  "f_name" : String,  //(isRequired)
  "s_name" : String,  //(isRequired)
  "t_name" : String,  //(optional)
  "sex" : String, //(isRequired)
  "birth_date" : Date,  //(isRequired)
  "department" : Department._id,  //(optional)
  "position" : Position._id, //(optional)
  "grade" : Grade._id,  //(optional)
  "salary" : Int //(isRequired)
}


http://host:port/tsproject/api/employee/:id
GET - получение сотрудника, ответ приходит в формате:
{
  "f_name" : String,
  "s_name" : String,
  "t_name" : String,
  "sex" : String,
  "birth_date" : Date,
  "department" : Department.name,
  "salary" : Int
}


http://host:port/tsproject/api/employee/:id/salary
PUT -  изменение зп сотрудника, рест ожидает объект в формате:
{
  "id" : Int,
  "salary" : Int
}


http://host:port/tsproject/api/employee/:id/department
PUT - перевод сотрудника в другой отдел, ожидается объект в формате:
{
  "id" : Int,
  "departament" : Departament._id
}

PUT - увольнение сотрудника, ожидает объект с одним полем {"closet": true}


http://host:port/tsproject/api/employee/:id/history
GET - получение истории по сотруднику, ответ в формате:
[
  {
    "f_name" : String,
    "s_name" : String,
    "t_name" : String,
    "sex" : String,
    "birth_date" : Date,
    "department" : Department._id,
    "position" : Position._id,
    "grade" : Grade._id,
    "salary" : Int,
    "start_date" : Date,
    "end_date" : Date
  }
]
